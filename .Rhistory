group_by(LAND_YEAR) %>%
summarise(n_trips = n()) %>%
mutate(LAND_YEAR = as.factor(LAND_YEAR))
sum_trips <- sum(match_trips_tab1$n_trips)
match_trips_tab2 <- match_trips_tab1 %>%
add_row(LAND_YEAR = 'Total', n_trips = sum_trips) %>%
flextable() %>%
delete_part(part = "header") %>%
add_header(LAND_YEAR = "Year",
n_trips = "Number of Trips") %>%
hline(part = 'body', i = nrow(match_trips_tab1), border = fp_border(width = 1)) %>%
hline(part = "header", border = fp_border(width = 2))
match_trips_tab2
match_trips_tab1
View(disc_rec_match8)
trips_match <- disc_rec_match8 %>%
select(VESSEL_ID, SCHEDULE_NUMBER, TRIPNUMBER, LAND_YEAR, COMMON_NAME, nSPECIES, fished, spp_catchlbs, trip_catchlbs_k)
trips_match <- disc_rec_match8 %>%
select(VESSEL_ID, SCHEDULE_NUMBER, TRIPNUMBER, LAND_YEAR, COMMON_NAME, nSPECIES, FISHED, tot_fishing_time_OBS, spp_catchlbs, trip_catchlbs_k)
View(trips_match)
librarian::shelf(tidyverse, sf, maps, dplyr)
lgbk <- readRDS("C:/Users/samantha.schiano/Documents/SFD-DAAS-ComObsDisc-SARS/Tools/Data/all_satl_logbook_data_11may23.RDS") %>%
filter(REGION == 'SATL',
GEAR %in% c('H', 'E'),
!is.na(COMMON_NAME))
R.Version()
# Remove records with missing area
lgbk2 <- lgbk %>%
filter(!is.na(AREA_FIN), AREA_FIN != '799')
# Trips missing area
chk_missing <- lgbk %>% filter(is.na(AREA_FIN) | AREA_FIN == '799') %>%
group_by(LAND_YEAR) %>%
summarise(ntrips = n_distinct(SCHEDULE_NUMBER))
# Trip-level catch processing
# su1 & su2
l1 <- lgbk2 %>%
group_by(SCHEDULE_NUMBER, AREA_FIN, COMMON_NAME) %>%
summarise(catchfreq=n()) %>%
mutate(pres = 1)
# Calculate number of trips reported within each area
# su3 & su4
l2 <- l1 %>%
group_by(AREA_FIN, COMMON_NAME) %>%
summarise(pos_n = n()) %>%
mutate(posn_blk = case_when(pos_n < 10 ~ 0,
TRUE ~ 1))
chk <- l2 %>% filter(COMMON_NAME == 'HOGFISH')
# Calculate flagged posn blocks by species
# sum_posnblk = number of areas with posn_blk = 1
# su5
l3 <- l2 %>%
group_by(COMMON_NAME) %>%
summarise(sum_posnblk = sum(posn_blk))
chk <- l3 %>% filter(COMMON_NAME == 'HOGFISH')
# Merge sum_posnblk with tripset level information
# Remove sum_posnblk = 0
# That species not present in that area
# su7
l4 <- l1 %>%
left_join(l3, by = join_by(COMMON_NAME)) %>%
filter(sum_posnblk != 0)
# Not commonly landed species
chk <- l3 %>% filter(sum_posnblk==0)
# Produce complete sample unit dataset for target species
# nrecs = number of species reported
lspA_1 <- l4 %>%
group_by(SCHEDULE_NUMBER, AREA_FIN) %>%
summarise(nrecs = n())
chk <- lspA_2 %>% filter(AREA_FIN == '723')
# Trips-areas with target species
lspA_2 <- l4 %>%
filter(COMMON_NAME == 'SNAPPER, RED') %>%
mutate(sp_A = pres) %>% ungroup() %>%
select(SCHEDULE_NUMBER, AREA_FIN, COMMON_NAME, sp_A)
chk <- lspA_2 %>% filter(AREA_FIN == '723')
lspA_3 <- lspA_1 %>%
left_join(lspA_2, by = join_by(SCHEDULE_NUMBER, AREA_FIN)) %>%
mutate(sp_A = case_when(is.na(sp_A) ~ 0,
TRUE ~ sp_A),
COMMON_NAME = case_when(is.na(COMMON_NAME) ~ 'SNAPPER, RED',
TRUE ~ COMMON_NAME))
lspA_4 <- l2 %>%
filter(COMMON_NAME == 'SNAPPER, RED')
# Remove strata where target species posn_blk == 0
lspA_5 <- lspA_3 %>%
left_join(lspA_4, by = join_by(COMMON_NAME, AREA_FIN)) %>%
filter(!is.na(posn_blk), posn_blk != 0) %>%
select(-c(nrecs, COMMON_NAME, pos_n, posn_blk))
View(lspA_4)
View(lspA_3)
View(lspA_4)
View(lspA_5)
chk <- lspA_5 %>% filter(AREA_FIN == '632')
# Produce sp_A, sp_B dataset
# Species level strata dataset
lspB_1 <- l4 %>%
select(-c(catchfreq, sum_posnblk))
chk <- lspB_1 %>% filter(AREA_FIN == '632')
View(lspB_1)
# Remove subregion-depth strata where target species do not exists
lspAB_1 <- lspB_1 %>%
left_join(lspA_5, by = join_by(SCHEDULE_NUMBER, AREA_FIN)) %>%
filter(!is.na(sp_A))
View(lspAB_1)
# 0 recs
chk <- lspAB_1 %>% filter(AREA_FIN == '632')
# Add in pres=0 records for all species
# Remove target species because already captured in sp_A
lspAB_2 <- lspAB_1 %>%
pivot_wider(names_from = COMMON_NAME, values_from = pres) %>%
pivot_longer(-c(SCHEDULE_NUMBER, AREA_FIN, sp_A),
names_to = "COMMON_NAME", values_to = "pres") %>%
replace(is.na(.), 0) %>%
filter(COMMON_NAME != 'SNAPPER, RED')
# Remove strata for associated species where posn_blk < 10
lspAB_3 <- lspAB_2 %>%
left_join(l2, by = join_by(COMMON_NAME, AREA_FIN)) %>%
filter(posn_blk == 1) %>%
rename(sp_B = "pres") %>%
select(-c(pos_n, posn_blk))
install.packages('RTools')
R.version
RStudio.Version()
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
?Sys.which
install.packages('remotes')
install.packages(;TMB)
install.packages('TMB')
install.packages('Rtools4')
Sys.which('make')
install.packages('jsonlite', type = 'source')
library(remotes)
library(TMB)
library(jsonlite)
install.packages('Rcpp')
library(Rcpp)
remotes::install_github(“noaa-fims/fims”)
remotes::install_github(NOAA-FIMS/FIMS)
remotes::install_github('NOAA-FIMS/FIMS')
remotes::install_github('NOAA-FIMS/FIMS')
remotes::install_github('NOAA-FIMS/FIMS')
library(FIMS)
Sys.which('make')
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which('make')
Sys.which('make')
r_dev_case <- function(r_dev_change=TRUE, nyr=30, logR_sd=0.1, om_sim_num=160, r_dev_sum2zero=FALSE){
r_dev_matrix <- matrix(NA, nrow=om_sim_num, ncol=nyr)
for(om_sim in 1:om_sim_num){
if(r_dev_change==TRUE){
r_dev_matrix[om_sim,] <- rnorm(nyr, mean=0, sd=logR_sd)
if (r_dev_sum2zero == TRUE) r_dev_matrix[om_sim,] <- r_dev_matrix[om_sim,] - mean(r_dev_matrix[om_sim,])
} else {
if(om_sim==1){
r_dev_matrix[om_sim,] <- rnorm(nyr, mean=0, sd=logR_sd)
if (r_dev_sum2zero == TRUE) r_dev_matrix[om_sim,] <- r_dev_matrix[om_sim,] - mean(r_dev_matrix[om_sim,])
} else {
r_dev_matrix[om_sim,] <- r_dev_matrix[(om_sim-1),]
}
}
}
return(r_dev_matrix)
}
#' F deviations generator
#' @param f_dev_change if True, generate different F deviations per iteration; If FALSE, generate same F deviations per iteration
#' @param nyr number of years
#' @param logF.sd SD of fishing mortality in log space
#' @param om_sim_num number of iterations per case
#' @param f_dev_sum2zero Sum F deviations to 0 or not
#' @export
f_dev_case <- function(f_dev_change, nyr=30, logf_sd=0.1, om_sim_num=160, f_dev_sum2zero = FALSE){
f_dev_matrix <- matrix(NA, nrow=om_sim_num, ncol=nyr)
for(om_sim in 1:om_sim_num){
if(f_dev_change==TRUE){
f_dev_matrix[om_sim,] <- rnorm(nyr, mean=0, sd=logf_sd)
if (f_dev_sum2zero == TRUE) f_dev_matrix[om_sim,] <- f_dev_matrix[om_sim,] - mean(f_dev_matrix[om_sim,])
} else {
if(om_sim==1){
f_dev_matrix[om_sim,] <- rnorm(nyr, mean=0, sd=logf_sd)
if (f_dev_sum2zero == TRUE) f_dev_matrix[om_sim,] <- f_dev_matrix[om_sim,] - mean(f_dev_matrix[om_sim,])
} else {
f_dev_matrix[om_sim,] <- f_dev_matrix[(om_sim-1),]
}
}
}
return(f_dev_matrix)
}
r_dev_case()
rec_dev <- re_dev_case()
rec_dev <- r_dev_case()
View(rec_dev)
stocks <- vector(mode="list", length=3)
View(stocks)
names(stocks) <- paste("stock", 1:num_stock, sep="")
names(stocks) <- paste("stock", 1:3, sep="")
View(stocks)
recruit_transportation <- lapply(1:length(30),
function(x)
matrix(c(1, 1, 1),
ncol=3, byrow=T))
View(recruit_transportation)
recruit_transportation <- lapply(1:30,
function(x)
matrix(c(1, 1, 1),
ncol=3, byrow=T))
View(recruit_transportation)
install.packages("remotes")
install.packages("devtools")
remotes::install_github(repo="Bai-Li-NOAA/Age_Structured_Stock_Assessment_Model_Comparison",
ref="spatial-structure")
remotes::install_github(repo="Bai-Li-NOAA/Age_Structured_Stock_Assessment_Model_Comparison",
ref="spatial-structure")
remotes::install_github("ManuelHentschel/vscDebugger")
install.packages("httpgd")
devtools::install_github("BenWilliams-NOAA/safe")
?safe
library(safe)
knitr::include_graphics(here::here('man', 'figures', 'README-template.PNG'))
devtools::install_github("BenWilliams-NOAA/safe")
?safe::apportion
library(safe)
?apportion
safe::apportion
# apportionment table example
appo <- safe::apportion
flextable::flextable(appo[-1,]) %>%
flextable::add_header_row(values = paste0(appo[1,], "%"), top=FALSE) %>%
flextable::border_remove() %>%
flextable::compose(i=1, j=1:2, part='header',
value=flextable::as_paragraph('')) %>%
flextable::compose(i=2, j=1:2, part='header',
value=flextable::as_paragraph('Area Apportionment')) %>%
flextable::merge_h(i=1:2, part = "header") %>%
flextable::font(fontname = "Times New Roman", part = "all") %>%
flextable::fontsize(size = 11, part = "all") %>%
flextable::align(j = 1, part = "all", align="left") %>%
flextable::compose(i = 1:2, j = 1,
value = flextable::as_paragraph(as.character(year)),
part = "body") %>%
flextable::compose(i = 3:4, j = 1,
value = flextable::as_paragraph(as.character(year+1)),
part = "body")  %>%
flextable::compose(i = 1:4, j = 2,
value = flextable::as_paragraph(rep(c('ABC (t)', 'OFL (t)'), 2)),
part = "body") %>%
# flextable::height(height = 0.2, part='body') %>%
# flextable::hrule(rule = "exact") %>%
flextable::hline_top(part='all') %>%
flextable::hline_bottom()
flextable::flextable(appo[-1,])
setwd("~/Automated_Stock_Assessment_Report")
library(here)
source <- c("NMFS Groundfish Survey",
"",
"U.S. Trawl Fisheries",
"",
"")
data <- c("Survey biomass",
"Age Composition",
"Catch",
"Age Composition",
"Length Composition")
years <- c("1984-1999 (triennial), 2001-2013 (biennial)",
"1984, 1987, 1990, 1993, 1996, 1999, 2003, 2005, 2007, 2009, 2011",
"1961-2013",
"1990,1998-2002, 2004, 2005, 2006, 2008, 2010",
"1963-1977, 1991-1997")
test_obj <- data.frame(source, data, years )
obj_tab <- flextable::flextable(test_obj)
obj_tab
dev.off()
export_component <- function(
object = NA,
file_format = "docx",
...){
if(file_format=="pdf"){
pdf(file = paste(here('exported'),sprintf(deparse(substitute(object))),".pdf")) # pdf fxn in base r
flextable::flextable(object)
dev.off()
} else if(file_format=="docx"){
doc_exp <- officer::read_docx()
print(doc_exp, target = paste(here('exported'),"/", sprintf(deparse(substitute(object))),".docx")) # %>% invisible()
} else if(file_format=="xlsx"){
openxlsx::write.xlsx(object, file = paste(here('exported',"/", sprintf(deparse(substitute(object))), ".xlsx")), overwrite = FALSE)
} else if(file_format=="csv"){
write.csv(object, file = paste(here('exported'),"/", sprintf(deparse(substitute(object))), ".csv"), row.names = FALSE)
} else if(file_format=="Rdata"){
save(object, file = paste(here('exported'), "/", sprintf(deparse(substitute(object))), ".Rdata"))
}
}
pdf(file = paste(here('exported'),sprintf(deparse(substitute(test_obj))),".pdf")) # pdf fxn in base r
flextable::flextable(test_obj)
dev.off()
here()
paste(here('exported'),sprintf(deparse(substitute(test_obj))),".pdf")
deparse(substitute(test_obj))
paste(here('exported'), "/", deparse(substitute(test_obj))),".pdf")
paste(here('exported'), "/", deparse(substitute(test_obj)),".pdf")
paste0(here('exported'),"/",sprintf(deparse(substitute(test_obj))),".pdf")
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(test_obj))),".pdf")) # pdf fxn in base r
flextable::flextable(test_obj)
dev.off()
library(gridExtra)
getwd()
here
library(here)
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(test_obj))),".pdf")) # pdf fxn in base r
gridExtra::grid.table(test_obj)
dev.off()
export_component <- function(
object = NA,
file_format = "docx",
...){
if(file_format=="pdf"){
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(object))),".pdf")) # pdf fxn in base r
gridExtra::grid.table(object)
dev.off()
# Doesn't fit to page
} else if(file_format=="docx"){
doc_exp <- officer::read_docx()
print(doc_exp, target = paste0(here('exported'),"/", sprintf(deparse(substitute(object))),".docx")) # %>% invisible()
} else if(file_format=="xlsx"){
openxlsx::write.xlsx(object, file = paste0(here('exported',"/", sprintf(deparse(substitute(object))), ".xlsx")), overwrite = FALSE)
} else if(file_format=="csv"){
write.csv(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".csv"), row.names = FALSE)
} else if(file_format=="Rdata"){
save(object, file = paste0(here('exported'), "/", sprintf(deparse(substitute(object))), ".Rdata"))
}
}
export_component(object = test_obj, file_format = "docx")
?body_add_par
export_component <- function(
object = NA,
file_format = "docx",
...){
if(file_format=="pdf"){
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(object))),".pdf")) # pdf fxn in base r
gridExtra::grid.table(object)
dev.off()
# Doesn't fit to page
} else if(file_format=="docx"){
doc_exp <- officer::read_docx() %>%
officer::body_add_table(object)
print(doc_exp, target = paste0(here('exported'),"/", sprintf(deparse(substitute(object))),".docx")) # %>% invisible()
} else if(file_format=="xlsx"){
openxlsx::write.xlsx(object, file = paste0(here('exported',"/", sprintf(deparse(substitute(object))), ".xlsx")), overwrite = FALSE)
} else if(file_format=="csv"){
write.csv(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".csv"), row.names = FALSE)
} else if(file_format=="Rdata"){
save(object, file = paste0(here('exported'), "/", sprintf(deparse(substitute(object))), ".Rdata"))
}
}
export_component(object = test_obj, file_format = "docx")
library(dplyr)
doc_exp <- officer::read_docx() <|
export_component <- function(
object = NA,
file_format = "docx",
...){
if(file_format=="pdf"){
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(object))),".pdf")) # pdf fxn in base r
gridExtra::grid.table(object)
dev.off()
# Doesn't fit to page
} else if(file_format=="docx"){
doc_exp <- officer::read_docx() %>%
officer::body_add_table(object)
print(doc_exp, target = paste0(here('exported'),"/", sprintf(deparse(substitute(object))),".docx")) # %>% invisible()
} else if(file_format=="xlsx"){
openxlsx::write.xlsx(object, file = paste0(here('exported',"/", sprintf(deparse(substitute(object))), ".xlsx")), overwrite = FALSE)
} else if(file_format=="csv"){
write.csv(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".csv"), row.names = FALSE)
} else if(file_format=="Rdata"){
save(object, file = paste0(here('exported'), "/", sprintf(deparse(substitute(object))), ".Rdata"))
}
}
export_component(object = test_obj, file_format = "docx")
export_component(object = test_obj, file_format = "xlsx")
paste0(here('exported',"/", sprintf(deparse(substitute(object))), ".xlsx")
)
paste0(here('exported'),"/", sprintf(deparse(substitute(object))
)
)
paste0(here('exported'),"/", sprintf(deparse(substitute(object))))
paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".xlsx")
export_component(object = test_obj, file_format = "xlsx")
paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".xlsx")
export_component <- function(
object = NA,
file_format = "docx",
...){
if(file_format=="pdf"){
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(object))),".pdf")) # pdf fxn in base r
gridExtra::grid.table(object)
dev.off()
# Doesn't fit to page
} else if(file_format=="docx"){
doc_exp <- officer::read_docx() %>%
officer::body_add_table(object)
print(doc_exp, target = paste0(here('exported'),"/", sprintf(deparse(substitute(object))),".docx")) # %>% invisible()
} else if(file_format=="xlsx"){
openxlsx::write.xlsx(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".xlsx"), overwrite = FALSE)
} else if(file_format=="csv"){
write.csv(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".csv"), row.names = FALSE)
} else if(file_format=="Rdata"){
save(object, file = paste0(here('exported'), "/", sprintf(deparse(substitute(object))), ".Rdata"))
}
}
export_component(object = test_obj, file_format = "xlsx")
export_component(object = test_obj, file_format = "csv")
export_component <- function(
object = NA,
file_format = "docx",
...){
if(file_format=="pdf"){
pdf(file = paste0(here('exported'),"/",sprintf(deparse(substitute(object))),".pdf")) # pdf fxn in base r
gridExtra::grid.table(object)
dev.off()
# Doesn't fit to page
} else if(file_format=="docx"){
doc_exp <- officer::read_docx() %>%
officer::body_add_table(object)
print(doc_exp, target = paste0(here('exported'),"/", sprintf(deparse(substitute(object))),".docx")) # %>% invisible()
} else if(file_format=="xlsx"){
openxlsx::write.xlsx(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".xlsx"), overwrite = FALSE)
} else if(file_format=="csv"){
write.csv(object, file = paste0(here('exported'),"/", sprintf(deparse(substitute(object))), ".csv"), row.names = FALSE)
} else if(file_format=="rdata"){
save(object, file = paste0(here('exported'), "/", sprintf(deparse(substitute(object))), ".Rdata"))
}
}
export_component(object = test_obj, file_format = "rdata")
load("C:/Users/samantha.schiano/Documents/Automated_Stock_Assessment_Report/exported/test_obj.Rdata")
View(test_obj)
View(obj_tab)
View(object)
stop(print("Output for stock synthesis is composed of multiple files. Recheck and add files to 'output.file' parameter and change 'multi.file' to TRUE."))
stop("Output for stock synthesis is composed of multiple files. Recheck and add files to 'output.file' parameter and change 'multi.file' to TRUE.")
?format_results
#' @param model assessment model used in evaluation;
#'              "ss", "bam", "asap", "fims", "amak", "ms-java", "wham", "mas"
#' @param file.format csv, txt, ss, rdata, dat
#' @param multi.file TRUE or FALSE; default FALSE
#'
#' @return
#' @export
#'
#' @examples
#'
format_results <- function(
output.file = NULL,
model = NULL,
file.format = NULL,
multi.file = FALSE,
...){
if(model=="ss" & multi.file==TRUE){
} else if (model=='ss' & multi.file==FALSE){
stop("Output for stock synthesis is composed of multiple files. Recheck and add files to 'output.file' parameter then change 'multi.file' to TRUE.")
}
if(model=='bam'){
if(length(output.file)>1 & multi.file==FALSE){
stop("Number of files > 2 and no multi-file indicated. Change 'multi.file' to TRUE or double check you have the the right output file.")
} else {
}
}
if(model=='asap'){
}
}
?format_results
devtools::document()
devtools::document()
?devtools::document()
here()
devtools::document(paste0(here('R'),"/","export_report_object.R"))
usethis::create_package("~")
usethis::create_package(here())
libr
library(here)
usethis::use_r("export_report_object.R")
library(devtools)
devtools::load_all()
devtools::check()
?pdf
?dev.off
?write.csv
devtools::check()
usethis::use_mit_license()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
?convert_output
?export_object
devtools::document()
?export_object
devtools::document()
?export_object
devtools::document()
devtools::document()
?export_object
usethis::use_package('here')
usethis::use_package('dplyr')
usethis::use_package("dplyr")
usethis::use_package("here")
usethis::use_readme_md()
